#
# DO NOT MODIFY!!!!
# This file is automatically generated by racc 1.4.5
# from racc grammer file "lib/arql/arql_grammer.rb".
#

require 'racc/parser'


require 'strscan'


module Arql

  class Parser < Racc::Parser

module_eval <<'..end lib/arql/arql_grammer.rb modeval..ida10e34e4a4', 'lib/arql/arql_grammer.rb', 51

def unquote(value)
  case value
  when /^'(.*)'$/ then $1
  when /^"(.*)"$/ then $1
  else value
  end
end

def unescape_quote(value)
  value.gsub(/\\(['|"])/, '\1')
end

def parse_arql(model, str)
  @model = model
  @input = str
  @joins = []
  tokens = []
  str = "" if str.nil?
  scanner = StringScanner.new(str + ' ')

  until scanner.eos?
    case
    when scanner.scan(/\s+/)
      # ignore space
    when m = scanner.scan(/<\=|>\=|>|</)
      tokens.push [:COMPARE_OP, m]
    when m = scanner.scan(/\!\=/i)
      tokens.push [:UNEQUAL, m]
    when m = scanner.scan(/\=/i)
      tokens.push [:EQUAL, m]
    when m = scanner.scan(/and\b/i)
      tokens.push   [:AND, m]
    when m = scanner.scan(/or\b/i)
      tokens.push   [:OR, m]
    when m = scanner.scan(/true\b/i)
      tokens.push   [:IDENTIFIER, true]
    when m = scanner.scan(/false\b/i)
      tokens.push   [:IDENTIFIER, false]
    when m = scanner.scan(/nil\b/i)
      tokens.push   [:NIL, nil]
    when m = scanner.scan(/'(((\\')|[^'])*)'/)                  # single quoted
      tokens.push   [:IDENTIFIER, unescape_quote(unquote(m))]
    when m = scanner.scan(/"(((\\")|[^"])*)"/)                  # double quoted
      tokens.push   [:IDENTIFIER, unescape_quote(unquote(m))]
    when m = scanner.scan(/\d*\.\d+/)                           # floats
      tokens.push   [:IDENTIFIER, m.to_f]
    when m = scanner.scan(/\d+\.?/)                             # integers
      tokens.push   [:IDENTIFIER, m.to_i]
    when m = scanner.scan(/[^ ]+/)
      tokens.push   [:IDENTIFIER, m]
    else
      raise "unexpected characters #{scanner.peek(5)}"
    end
  end
  tokens.push [false, false]
  yyparse(tokens, :each)
end
..end lib/arql/arql_grammer.rb modeval..ida10e34e4a4

##### racc 1.4.5 generates ###

racc_reduce_table = [
 0, 0, :racc_error,
 1, 10, :_reduce_1,
 3, 11, :_reduce_2,
 3, 11, :_reduce_3,
 1, 11, :_reduce_none,
 1, 13, :_reduce_5,
 1, 13, :_reduce_6,
 1, 14, :_reduce_7,
 1, 15, :_reduce_8,
 1, 15, :_reduce_9,
 1, 15, :_reduce_10,
 3, 12, :_reduce_11 ]

racc_reduce_n = 12

racc_shift_n = 19

racc_action_table = [
     9,    10,    11,    16,    17,     6,     7,     4,    12,     4,
     4,    18,     6 ]

racc_action_check = [
     3,     3,     3,     8,     8,     1,     1,     6,     5,     7,
     0,    12,    14 ]

racc_action_pointer = [
     3,     3,   nil,    -4,   nil,     8,     0,     2,    -4,   nil,
   nil,   nil,    11,   nil,    10,   nil,   nil,   nil,   nil ]

racc_action_default = [
   -12,    -1,    -4,   -12,    -7,   -12,   -12,   -12,   -12,    -8,
    -9,   -10,   -12,    -2,    -3,   -11,    -5,    -6,    19 ]

racc_goto_table = [
     1,    15,     5,     8,   nil,   nil,    13,    14 ]

racc_goto_check = [
     2,     4,     1,     6,   nil,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,     2,     0,   nil,    -7,   nil,     0 ]

racc_goto_default = [
   nil,   nil,   nil,     2,   nil,     3,   nil ]

racc_token_table = {
 false => 0,
 Object.new => 1,
 :AND => 2,
 :OR => 3,
 :EQUAL => 4,
 :UNEQUAL => 5,
 :COMPARE_OP => 6,
 :IDENTIFIER => 7,
 :NIL => 8 }

racc_use_result_var = false

racc_nt_base = 9

Racc_arg = [
 racc_action_table,
 racc_action_check,
 racc_action_default,
 racc_action_pointer,
 racc_goto_table,
 racc_goto_check,
 racc_goto_default,
 racc_goto_pointer,
 racc_nt_base,
 racc_reduce_table,
 racc_token_table,
 racc_shift_n,
 racc_reduce_n,
 racc_use_result_var ]

Racc_token_to_s_table = [
'$end',
'error',
'AND',
'OR',
'EQUAL',
'UNEQUAL',
'COMPARE_OP',
'IDENTIFIER',
'NIL',
'$start',
'target',
'conditions',
'condition',
'identifier',
'column',
'operator']

Racc_debug_parser = false

##### racc system variables end #####

 # reduce 0 omitted

module_eval <<'.,.,', 'lib/arql/arql_grammer.rb', 17
  def _reduce_1( val, _values)
 Query::Base.new(:condition => val[0], :joins => @joins.collect(&:join).flatten.compact)
  end
.,.,

module_eval <<'.,.,', 'lib/arql/arql_grammer.rb', 21
  def _reduce_2( val, _values)
 Query::And.instance.expression(val[0], val[2])
  end
.,.,

module_eval <<'.,.,', 'lib/arql/arql_grammer.rb', 22
  def _reduce_3( val, _values)
 Query::Or.instance.expression(val[0], val[2])
  end
.,.,

 # reduce 4 omitted

module_eval <<'.,.,', 'lib/arql/arql_grammer.rb', 27
  def _reduce_5( val, _values)
 val[0]
  end
.,.,

module_eval <<'.,.,', 'lib/arql/arql_grammer.rb', 28
  def _reduce_6( val, _values)
 val[0]
  end
.,.,

module_eval <<'.,.,', 'lib/arql/arql_grammer.rb', 32
  def _reduce_7( val, _values)
 returning(Query::Column.new(@model, val[0])) {|column| @joins << column}
  end
.,.,

module_eval <<'.,.,', 'lib/arql/arql_grammer.rb', 36
  def _reduce_8( val, _values)
 Query::Equal.instance
  end
.,.,

module_eval <<'.,.,', 'lib/arql/arql_grammer.rb', 37
  def _reduce_9( val, _values)
 Query::Unequal.instance
  end
.,.,

module_eval <<'.,.,', 'lib/arql/arql_grammer.rb', 38
  def _reduce_10( val, _values)
 Query::Operator.new(val[0])
  end
.,.,

module_eval <<'.,.,', 'lib/arql/arql_grammer.rb', 42
  def _reduce_11( val, _values)
 val[1].expression(val[0], val[2])
  end
.,.,

 def _reduce_none( val, _values)
  val[0]
 end

  end   # class Parser

end   # module Arql
