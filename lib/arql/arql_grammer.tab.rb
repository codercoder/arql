#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'strscan'

module Arql
  class Parser < Racc::Parser

module_eval(<<'...end arql_grammer.rb/module_eval...', 'arql_grammer.rb', 41)
OPERATORS = %w[= < >]

def unquote(value)
  case value
  when /^'(.*)'$/ then $1
  when /^"(.*)"$/ then $1
  else value
  end
end

def unescape_quote(value)
  value.gsub(/\\(['|"])/, '\1')
end

def parse_arql(model, str)
  @model = model
  @input = str
  @joins = []
  tokens = []
  str = "" if str.nil?
  scanner = StringScanner.new(str + ' ')

  until scanner.eos?
    case
    when scanner.scan(/\s+/)
      # ignore space
    when m = scanner.scan(/#{OPERATORS.join('|')}/i)
      tokens.push [:OPERATOR, m]
    when m = scanner.scan(/and\b/i)
      tokens.push   [:AND, m]
    when m = scanner.scan(/or\b/i)
      tokens.push   [:OR, m]
    when m = scanner.scan(/'(((\\')|[^'])*)'/)                  # single quoted
      tokens.push   [:IDENTIFIER, unescape_quote(unquote(m))]
    when m = scanner.scan(/"(((\\")|[^"])*)"/)                  # double quoted
      tokens.push   [:IDENTIFIER, unescape_quote(unquote(m))]
    when m = scanner.scan(/\d*\.\d+/)                           # floats
      tokens.push   [:IDENTIFIER, m.to_f]
    when m = scanner.scan(/\d+\.?/)                             # integers
      tokens.push   [:IDENTIFIER, m.to_i]
    when m = scanner.scan(/[\w-]+/)
      tokens.push   [:IDENTIFIER, unescape_quote(unquote(m))]
    when m = scanner.scan(/(\\"|\\'|[\w-])+/) # start with escaped quate
      tokens.push   [:IDENTIFIER, unescape_quote(m)]
    else
      raise "unexpected characters #{scanner.peek(5)}"
    end
  end
  tokens.push [false, false]
  yyparse(tokens, :each)
end
...end arql_grammer.rb/module_eval...
##### State transition tables begin ###

racc_action_table = [
     8,     9,    10,     7,     2,     6,    12,     2,     2,     8 ]

racc_action_check = [
     4,     4,     6,     3,     0,     1,     7,     8,     9,    14 ]

racc_action_pointer = [
     0,     0,   nil,     3,    -2,   nil,    -2,     6,     3,     4,
   nil,   nil,   nil,   nil,     7 ]

racc_action_default = [
    -8,    -8,    -6,    -8,    -1,    -4,    -8,    -8,    -8,    -8,
    -5,    -7,    15,    -2,    -3 ]

racc_goto_table = [
     4,     3,    11,   nil,   nil,   nil,   nil,   nil,    13,    14 ]

racc_goto_check = [
     2,     1,     4,   nil,   nil,   nil,   nil,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,     1,     0,   nil,    -4,   nil ]

racc_goto_default = [
   nil,   nil,   nil,     5,   nil,     1 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 7, :_reduce_1,
  3, 8, :_reduce_2,
  3, 8, :_reduce_3,
  1, 8, :_reduce_none,
  1, 10, :_reduce_5,
  1, 11, :_reduce_6,
  3, 9, :_reduce_7 ]

racc_reduce_n = 8

racc_shift_n = 15

racc_token_table = {
  false => 0,
  :error => 1,
  :AND => 2,
  :OR => 3,
  :IDENTIFIER => 4,
  :OPERATOR => 5 }

racc_nt_base = 6

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "AND",
  "OR",
  "IDENTIFIER",
  "OPERATOR",
  "$start",
  "target",
  "conditions",
  "condition",
  "identifier",
  "column" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'arql_grammer.rb', 14)
  def _reduce_1(val, _values)
     Query.new(:condition => val[0], :joins => @joins.collect(&:joins).flatten.compact) 
  end
.,.,

module_eval(<<'.,.,', 'arql_grammer.rb', 18)
  def _reduce_2(val, _values)
     Query::And.new(val[0], val[2]) 
  end
.,.,

module_eval(<<'.,.,', 'arql_grammer.rb', 19)
  def _reduce_3(val, _values)
     Query::Or.new(val[0], val[2]) 
  end
.,.,

# reduce 4 omitted

module_eval(<<'.,.,', 'arql_grammer.rb', 24)
  def _reduce_5(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'arql_grammer.rb', 28)
  def _reduce_6(val, _values)
     returning(Query::Column.create(@model, val[0])) {|column| @joins << column} 
  end
.,.,

module_eval(<<'.,.,', 'arql_grammer.rb', 32)
  def _reduce_7(val, _values)
     Query::Condition.new(val[0], val[1], val[2]) 
  end
.,.,

def _reduce_none(val, _values)
  val[0]
end

  end   # class Parser
  end   # module Arql
