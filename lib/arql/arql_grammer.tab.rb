#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'strscan'

module Arql
  class Parser < Racc::Parser

module_eval(<<'...end arql_grammer.rb/module_eval...', 'arql_grammer.rb', 71)

def unquote(value)
  case value
  when /^'(.*)'$/ then $1
  when /^"(.*)"$/ then $1
  else value
  end
end

def unescape_quote(value)
  value.gsub(/\\(['|"])/, '\1')
end

def parse_arql(model, str)
  @model = model
  @input = str
  @joins = []
  tokens = []
  str = "" if str.nil?
  scanner = StringScanner.new(str + ' ')

  until scanner.eos?
    case
    when scanner.scan(/\s+/)
      # ignore space
    when m = scanner.scan(/<\=|>\=|>|</)
      tokens.push [:COMPARE_OP, m]
    when m = scanner.scan(/\!\=/)
      tokens.push [:UNEQUAL, m]
    when m = scanner.scan(/\=/)
      tokens.push [:EQUAL, m]
    when m = scanner.scan(/,/)
      tokens.push [:COMMA, m]
    when m = scanner.scan(/and\b/i)
      tokens.push   [:AND, m]
    when m = scanner.scan(/or\b/i)
      tokens.push   [:OR, m]
    when m = scanner.scan(/true\b/i)
      tokens.push   [:IDENTIFIER, true]
    when m = scanner.scan(/false\b/i)
      tokens.push   [:IDENTIFIER, false]
    when m = scanner.scan(/nil\b/i)
      tokens.push   [:NIL, nil]
    when m = scanner.scan(/order\s+by\b/i)
      tokens.push   [:ORDER_BY, m]
    when m = scanner.scan(/'(((\\')|[^'])*)'/)                  # single quoted
      tokens.push   [:IDENTIFIER, unescape_quote(unquote(m))]
    when m = scanner.scan(/"(((\\")|[^"])*)"/)                  # double quoted
      tokens.push   [:IDENTIFIER, unescape_quote(unquote(m))]
    when m = scanner.scan(/\d*\.\d+/)                           # floats
      tokens.push   [:IDENTIFIER, m.to_f]
    when m = scanner.scan(/\d+\.?/)                             # integers
      tokens.push   [:IDENTIFIER, m.to_i]
    when m = scanner.scan(/[^ ]+/)
      tokens.push   [:IDENTIFIER, m]
    else
      raise "unexpected characters #{scanner.peek(5)}"
    end
  end
  tokens.push [false, false]
  yyparse(tokens, :each)
end
...end arql_grammer.rb/module_eval...
##### State transition tables begin ###

racc_action_table = [
    13,    14,    15,    22,    24,    11,    12,     5,     8,    17,
     5,     5,     5,     7,    25,    11,     5 ]

racc_action_check = [
     4,     4,     4,    16,    16,     3,     3,     8,     2,     7,
     0,    11,    12,     1,    19,    21,    25 ]

racc_action_pointer = [
     2,    13,     6,     2,    -5,   nil,   nil,     9,    -1,   nil,
   nil,     3,     4,   nil,   nil,   nil,    -5,   nil,   nil,     4,
   nil,    12,   nil,   nil,   nil,     8,   nil ]

racc_action_default = [
    -2,   -19,    -4,    -3,   -19,   -14,   -11,   -19,   -19,    -1,
    -5,   -19,   -19,   -15,   -16,   -17,   -19,    27,    -6,    -7,
    -9,   -10,   -12,   -18,   -13,   -19,    -8 ]

racc_goto_table = [
    18,    19,     3,    10,     1,     9,     2,    23,    16,   nil,
   nil,   nil,   nil,    20,    21,   nil,   nil,    26,    19 ]

racc_goto_check = [
     6,     7,     4,     5,     1,     3,     2,     9,    10,   nil,
   nil,   nil,   nil,     4,     4,   nil,   nil,     6,     7 ]

racc_goto_pointer = [
   nil,     4,     6,     3,     2,     1,    -8,    -7,   nil,    -9,
     4 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     4,     6,   nil,
   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 12, :_reduce_1,
  0, 13, :_reduce_none,
  1, 13, :_reduce_none,
  0, 14, :_reduce_none,
  1, 14, :_reduce_none,
  2, 16, :_reduce_6,
  1, 17, :_reduce_7,
  3, 17, :_reduce_8,
  3, 15, :_reduce_9,
  3, 15, :_reduce_10,
  1, 15, :_reduce_none,
  1, 20, :_reduce_12,
  1, 20, :_reduce_13,
  1, 18, :_reduce_14,
  1, 21, :_reduce_15,
  1, 21, :_reduce_16,
  1, 21, :_reduce_17,
  3, 19, :_reduce_18 ]

racc_reduce_n = 19

racc_shift_n = 27

racc_token_table = {
  false => 0,
  :error => 1,
  :ORDER_BY => 2,
  :AND => 3,
  :OR => 4,
  :EQUAL => 5,
  :UNEQUAL => 6,
  :COMPARE_OP => 7,
  :IDENTIFIER => 8,
  :NIL => 9,
  :COMMA => 10 }

racc_nt_base = 11

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "ORDER_BY",
  "AND",
  "OR",
  "EQUAL",
  "UNEQUAL",
  "COMPARE_OP",
  "IDENTIFIER",
  "NIL",
  "COMMA",
  "$start",
  "target",
  "opt_conditions",
  "opt_order_by",
  "conditions",
  "order_by",
  "columns",
  "column",
  "condition",
  "identifier",
  "operator" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'arql_grammer.rb', 18)
  def _reduce_1(val, _values)
     Query::Base.new(:condition => val[0], :joins => @joins, :order_by => val[1]) 
  end
.,.,

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

module_eval(<<'.,.,', 'arql_grammer.rb', 32)
  def _reduce_6(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'arql_grammer.rb', 36)
  def _reduce_7(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'arql_grammer.rb', 37)
  def _reduce_8(val, _values)
     [val[0]] + val[2] 
  end
.,.,

module_eval(<<'.,.,', 'arql_grammer.rb', 41)
  def _reduce_9(val, _values)
     Query::And.instance.expression(val[0], val[2]) 
  end
.,.,

module_eval(<<'.,.,', 'arql_grammer.rb', 42)
  def _reduce_10(val, _values)
     Query::Or.instance.expression(val[0], val[2]) 
  end
.,.,

# reduce 11 omitted

module_eval(<<'.,.,', 'arql_grammer.rb', 47)
  def _reduce_12(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'arql_grammer.rb', 48)
  def _reduce_13(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'arql_grammer.rb', 52)
  def _reduce_14(val, _values)
     returning(Query::Column.new(@model, val[0])) {|column| @joins << column} 
  end
.,.,

module_eval(<<'.,.,', 'arql_grammer.rb', 56)
  def _reduce_15(val, _values)
     Query::Equal.instance 
  end
.,.,

module_eval(<<'.,.,', 'arql_grammer.rb', 57)
  def _reduce_16(val, _values)
     Query::Unequal.instance 
  end
.,.,

module_eval(<<'.,.,', 'arql_grammer.rb', 58)
  def _reduce_17(val, _values)
     Query::Operator.new(val[0]) 
  end
.,.,

module_eval(<<'.,.,', 'arql_grammer.rb', 62)
  def _reduce_18(val, _values)
     val[1].expression(val[0], val[2]) 
  end
.,.,

def _reduce_none(val, _values)
  val[0]
end

  end   # class Parser
  end   # module Arql
