#
# DO NOT MODIFY!!!!
# This file is automatically generated by racc 1.4.5
# from racc grammer file "lib/aql/aql_grammer.rb".
#

require 'racc/parser'


require 'strscan'


module Aql

  class Parser < Racc::Parser

module_eval <<'..end lib/aql/aql_grammer.rb modeval..idbc0f5f24d6', 'lib/aql/aql_grammer.rb', 38

def unquote(value)
  case value
  when /^'(.*)'$/ then $1
  when /^"(.*)"$/ then $1
  else value
  end
end

def unescape_quote(value)
  value.gsub(/\\(['|"])/, '\1')
end

def parse_aql(str)
  @input = str
  tokens = []
  str = "" if str.nil?
  scanner = StringScanner.new(str + ' ')

  until scanner.eos?
    case
    when scanner.scan(/\s+/)
      # ignore space
    when m = scanner.scan(/=/i)
      tokens.push [:EQUAL, m]
    when m = scanner.scan(/'[^']*'/)
      tokens.push   [:IDENTIFIER, unescape_quote(unquote(m))]
    when m = scanner.scan(/[\w-]+/)
      tokens.push   [:IDENTIFIER, unescape_quote(unquote(m))]
    # when m = scanner.scan(/'(((\\')|[^'])*)'/) # single quoted
    #   tokens.push   [:IDENTIFIER, unescape_quote(unquote(m))]
    # when m = scanner.scan(/"(((\\")|[^"])*)"/)
    #   tokens.push   [:IDENTIFIER, unescape_quote(unquote(m))]
    # when m = scanner.scan(/((\d+\.?\d*)|(\d*\.?\d+))/)
    #   tokens.push   [:IDENTIFIER, m]
    # when m = scanner.scan(/(\\"|\\'|[\w-])+/) # no quote
    #   tokens.push   [:IDENTIFIER, unescape_quote(m)]
    else
      raise "unexpected characters #{scanner.peek(5)}"
    end
  end
  tokens.push [false, false]
  yyparse(tokens, :each)
end
..end lib/aql/aql_grammer.rb modeval..idbc0f5f24d6

##### racc 1.4.5 generates ###

racc_reduce_table = [
 0, 0, :racc_error,
 1, 5, :_reduce_1,
 1, 6, :_reduce_none,
 1, 8, :_reduce_3,
 1, 9, :_reduce_4,
 3, 7, :_reduce_5 ]

racc_reduce_n = 6

racc_shift_n = 11

racc_action_table = [
     1,     6,     7,     9,     1 ]

racc_action_check = [
     0,     2,     5,     6,     8 ]

racc_action_pointer = [
    -3,   nil,     1,   nil,   nil,     0,     3,   nil,     1,   nil,
   nil ]

racc_action_default = [
    -6,    -4,    -6,    -1,    -2,    -6,    -6,    -3,    -6,    11,
    -5 ]

racc_goto_table = [
     5,     4,     3,     8,     2,   nil,   nil,   nil,    10 ]

racc_goto_check = [
     5,     3,     2,     4,     1,   nil,   nil,   nil,     5 ]

racc_goto_pointer = [
   nil,     4,     2,     1,    -2,     0 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil ]

racc_token_table = {
 false => 0,
 Object.new => 1,
 :EQUAL => 2,
 :IDENTIFIER => 3 }

racc_use_result_var = false

racc_nt_base = 4

Racc_arg = [
 racc_action_table,
 racc_action_check,
 racc_action_default,
 racc_action_pointer,
 racc_goto_table,
 racc_goto_check,
 racc_goto_default,
 racc_goto_pointer,
 racc_nt_base,
 racc_reduce_table,
 racc_token_table,
 racc_shift_n,
 racc_reduce_n,
 racc_use_result_var ]

Racc_token_to_s_table = [
'$end',
'error',
'EQUAL',
'IDENTIFIER',
'$start',
'target',
'conditions',
'condition',
'operator',
'identifier']

Racc_debug_parser = false

##### racc system variables end #####

 # reduce 0 omitted

module_eval <<'.,.,', 'lib/aql/aql_grammer.rb', 13
  def _reduce_1( val, _values)
 Query.new(:condition => val[0])
  end
.,.,

 # reduce 2 omitted

module_eval <<'.,.,', 'lib/aql/aql_grammer.rb', 21
  def _reduce_3( val, _values)
 '='
  end
.,.,

module_eval <<'.,.,', 'lib/aql/aql_grammer.rb', 25
  def _reduce_4( val, _values)
 val[0]
  end
.,.,

module_eval <<'.,.,', 'lib/aql/aql_grammer.rb', 29
  def _reduce_5( val, _values)
 Query::Condition.new(val[0], val[1], val[2])
  end
.,.,

 def _reduce_none( val, _values)
  val[0]
 end

  end   # class Parser

end   # module Aql
